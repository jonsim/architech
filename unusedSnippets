
   private class TwoDPanelScrollable implements Scrollable {
      /** Returns the preferred size of the viewport for a view component. For
       * example the preferredSize of a JList component is the size required to
       * accommodate all of the cells in its list however the value of
       * preferredScrollableViewportSize is the size required for JList.getVisibleRowCount()
       * rows. A component without any properties that would effect the viewport
       * size should just return getPreferredSize() here. */
      public Dimension getPreferredScrollableViewportSize() {
         int width = 1;//400;
         int height = 1;//180;

         return new Dimension(width, height);
         //return getSize();
      }

      /** Components that display logical rows or columns should compute the scroll
       * increment that will completely expose one block of rows or columns,
       * depending on the value of orientation.
       *
       * Scrolling containers, like JScrollPane, will use this method each time the
       * user requests a block scroll. */
      public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
         // visibleRect - The view area visible within the viewport
         // orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.
         // direction - Less than zero to scroll up/left, greater than zero for down/right.

         return 150;
      }

      /** Return true if a viewport should always force the height of this Scrollable
       * to match the height of the viewport. For example a columnar text view that
       * flowed text in left to right columns could effectively disable vertical
       * scrolling by returning true here.
       *
       * Scrolling containers, like JViewport, will use this method each time they
       * are validated. */
      public boolean getScrollableTracksViewportHeight() {

         return false;
      }

      /** Return true if a viewport should always force the width of this Scrollable
       * to match the width of the viewport. For example a normal text view that
       * supported line wrapping would return true here, since it would be undesirable
       * for wrapped lines to disappear beyond the right edge of the viewport. Note
       * that returning true for a Scrollable whose ancestor is a JScrollPane
       * effectively disables horizontal scrolling.
       *
       * Scrolling containers, like JViewport, will use this method each time they
       * are validated. */
      public boolean getScrollableTracksViewportWidth() {

         return false;
      }

      /** Components that display logical rows or columns should compute the scroll
       * increment that will completely expose one new row or column, depending on
       * the value of orientation. Ideally, components should handle a partially
       * exposed row or column by returning the distance required to completely
       * expose the item.
       *
       * Scrolling containers, like JScrollPane, will use this method each time the
       * user requests a unit scroll. */
      public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
         // visibleRect - The view area visible within the viewport
         // orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.
         // direction - Less than zero to scroll up/left, greater than zero for down/right.

         return 15;
      }
   }
